# 1026번.보물
# 옛날 옛적에 수학이 항상 큰 골칫거리였던 나라가 있었다. 이 나라의 국왕 김지민은 다음과 같은 문제를 내고 큰 상금을 걸었다.
# 길이가 N인 정수 배열 A와 B가 있다. 다음과 같이 함수 S를 정의하자.
# S = A[0] × B[0] + ... + A[N-1] × B[N-1]
# S의 값을 가장 작게 만들기 위해 A의 수를 재배열하자. 단, B에 있는 수는 재배열하면 안 된다.
# S의 최솟값을 출력하는 프로그램을 작성하시오.

n = int(input())
a = list(map(int, input().split()))
b = list(map(int, input().split()))


# n = 5
# a = '1 1 1 6 0'
# b = '2 7 8 3 1'

# a = list(map(int, a.split()))
# b = list(map(int, b.split()))
# b

# a.sort()
# a


def make_min_s(n,a,b):
    s = 0
    a1 = a.copy()
    b1 = b.copy()
    a1.sort()
    for i in range(n):
        s += a1[i] * max(b1)
        b1.remove(max(b1))
    return(s)

print(make_min_s(n, a, b))


# 2839번.설탕 배달 
# 상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.
# 상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.
# 상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N이 주어진다. (3 ≤ N ≤ 5000)

# 출력
# 상근이가 배달하는 봉지의 최소 개수를 출력한다. 만약, 정확하게 N킬로그램을 만들 수 없다면 -1을 출력한다.

N =int(input())
# N = 21
# def get_min_bag(N):
#     result = 0
#     n_5 = N//5
#     result += n_5
#     N = N-N//5*5

#     if N%3 == 0:
#         result += N//3
#         return result
#     else :
#         return -1


# 5로 나누어 떨어질 때 까지 3을 뺴는 게 결국 목적. 왜냐? 5를 최대한 쓰고 싶으니까!
def get_min_bag(N):
    cnt = 0
    while N%5 > 0:
        N -= 3
        cnt += 1
        if N < 0:
            return -1
    cnt += N//5
    return cnt

print(get_min_bag(N))


# 11399번.ATM

# 인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다.
# 사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자. [1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 3분만에 돈을 뽑을 수 있다. 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = 4분이 걸리게 된다. 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 총 3+1+4 = 8분이 필요하게 된다. 4번 사람은 3+1+4+3 = 11분, 5번 사람은 3+1+4+3+2 = 13분이 걸리게 된다. 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = 39분이 된다.
# 줄을 [2, 5, 1, 4, 3] 순서로 줄을 서면, 2번 사람은 1분만에, 5번 사람은 1+2 = 3분, 1번 사람은 1+2+3 = 6분, 4번 사람은 1+2+3+3 = 9분, 3번 사람은 1+2+3+3+4 = 13분이 걸리게 된다. 각 사람이 돈을 인출하는데 필요한 시간의 합은 1+3+6+9+13 = 32분이다. 이 방법보다 더 필요한 시간의 합을 최소로 만들 수는 없다.
# 줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때, 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 사람의 수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어진다. (1 ≤ Pi ≤ 1,000)

# 출력
# 첫째 줄에 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 출력한다.


N = int(input())
input1 = '3 1 4 3 2'

# Pi = list(map(int, input().split()))
Pi = list(map(int, input1.split()))
# Pi.sort()
# sum(Pi[:1+1])
def get_min_withdrawl_time(Pi):
    result = 0
    Pi = sorted(Pi)
    for i in range(len(Pi)):
        result += sum(Pi[:i+1])
    return result         
get_min_withdrawl_time(Pi)


# 11047번 동전 0
# 
# 문제
# 준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.
# 동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)
# 둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)

# 출력
# 첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.

N, K = map(int, input().split())

coin_list = []
for i in range(N):
    coin_list.append(int(input()))

def get_min_coin(K, coin_list):
    result = 0
    coin_list = sorted(coin_list, reverse=True)

    for i in coin_list:
        while K >= i:
            # print('K is', K)
            # print('i is', i)
            K -= i
            result += 1
    return result 


K = 4200
N = 10
coin_list = [1
,5
,10
,50
,100
,500
,1000
,5000
,10000
,50000
]

get_min_coin(K, coin_list)